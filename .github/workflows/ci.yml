name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  CACHE_KEY: node-modules-${{ hashFiles('**/package-lock.json') }}

jobs:
  # 🧪 Testing Jobs
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: 📥 Install dependencies
        run: npm ci
        
      - name: 🔍 Lint code
        run: npm run lint
        
      - name: 🏗️ Type check
        run: npm run type-check
        
      - name: 🧪 Run unit tests
        run: npm run test
        
      - name: 📊 Upload coverage
        uses: codecov/codecov-action@v3
        if: matrix.node-version == 18

  # ♿ Accessibility Testing
  accessibility:
    name: ♿ Accessibility Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📥 Install dependencies
        run: npm ci
        
      - name: 🏗️ Build application
        run: npm run build
        
      - name: ♿ Run accessibility tests
        run: npm run test:accessibility
        
      - name: 📊 Upload accessibility report
        uses: actions/upload-artifact@v3
        with:
          name: accessibility-report
          path: accessibility-report.json

  # ⚡ Performance Testing
  performance:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📥 Install dependencies
        run: npm ci
        
      - name: 🏗️ Build application
        run: npm run build
        
      - name: 🚀 Start preview server
        run: npm run preview &
        
      - name: ⏳ Wait for server
        run: sleep 10
        
      - name: 🔍 Run Lighthouse CI
        run: npm run test:lighthouse
        
      - name: 📊 Upload performance report
        uses: actions/upload-artifact@v3
        with:
          name: lighthouse-report
          path: lighthouse-report.json

  # 🔒 Security Audit
  security:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📥 Install dependencies
        run: npm ci
        
      - name: 🔒 Run security audit
        run: npm run security:audit

  # 🏗️ Build Job
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: [test, accessibility, performance, security]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📥 Install dependencies
        run: npm ci
        
      - name: 🏗️ Build for production
        run: npm run build:production
        
      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/
          retention-days: 30

  # 🚀 Deploy to Netlify
  deploy:
    name: 🚀 Deploy to Netlify
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/
          
      - name: 🚀 Deploy to Netlify
        uses: netlify/actions/cli@master
        with:
          args: deploy --prod --dir=dist
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

  # 🏷️ Create Release
  release:
    name: 🏷️ Create Release
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: github.event_name == 'release'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/
          
      - name: 📦 Create release archive
        run: |
          zip -r omniverse-ai-v${{ github.event.release.tag_name }}.zip dist/
          tar -czf omniverse-ai-v${{ github.event.release.tag_name }}.tar.gz dist/
          
      - name: 📤 Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./omniverse-ai-v${{ github.event.release.tag_name }}.zip
          asset_name: omniverse-ai-v${{ github.event.release.tag_name }}.zip
          asset_content_type: application/zip

  # 📊 Code Quality
  code-quality:
    name: 📊 Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 📊 SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # 📱 Mobile Testing
  mobile-testing:
    name: 📱 Mobile Testing
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📥 Install dependencies
        run: npm ci
        
      - name: 🏗️ Build application
        run: npm run build
        
      - name: 📱 Run mobile tests
        run: npm run test:mobile

  # 🔔 Notifications
  notify:
    name: 🔔 Notify Team
    runs-on: ubuntu-latest
    needs: [test, build, deploy]
    if: always()
    
    steps:
      - name: 🔔 Notify on success
        if: needs.deploy.result == 'success'
        run: |
          echo "✅ Deployment successful!"
          echo "🌐 Live at: https://omniverseai.netlify.app"
          
      - name: 🚨 Notify on failure
        if: failure()
        run: |
          echo "❌ Pipeline failed!"
          echo "🔍 Check the logs for details"
